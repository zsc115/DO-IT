#### 第十周学习内容

##### 深复制与浅复制的区别

定义：

浅复制：浅拷贝是按位拷贝对象，它会创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值；如果属性是内存地址（引用类型），拷贝的就是内存地址 ，因此如果其中一个对象改变了这个地址，就会影响到另一个对象。

深复制：深拷贝会拷贝所有的属性,并拷贝属性指向的动态分配的内存。当对象和它所引用的对象一起拷贝时即发生深拷贝。



实现：

浅复制：浅拷贝的前提是该类了实现`Cloneable`接口，并重写`clone`方法。在拷贝某个对象时，调用该对象的`clone`方法返回一个新的对象，该对象就是浅拷贝的结果。

```java
public class Subject {
    private String name; 
   public Subject(String s) { 
      name = s; 
   } 
   public String getName() { 
      return name; 
   } 
   public void setName(String s) { 
      name = s; 
   } 
}
public class Student implements Cloneable { 
    // 对象引用 
   private Subject subj; 

   private String name; 

   public Student(String s, String sub) { 
      name = s; 
      subj = new Subject(sub); 
   } 

   public Subject getSubj() { 
      return subj; 
   } 

   public String getName() { 
      return name; 
   } 

   public void setName(String s) { 
      name = s; 
   } 

   /** 
    *  重写clone()方法 
    * @return 
    */ 
   public Object clone() { 
      //浅拷贝 
      try { 
         // 直接调用父类的clone()方法
         return super.clone(); 
      } catch (CloneNotSupportedException e) { 
         return null; 
      } 
   } 
}
public class CopyTest {
    public static void main(String[] args) {
        // 原始对象
        Student stud = new Student("John", "Algebra");
        System.out.println("Original Object: " + stud.getName() + " - " + stud.getSubj().getName());
        // 拷贝对象
        Student clonedStud = (Student) stud.clone();
        System.out.println("Cloned Object: " + clonedStud.getName() + " - " + clonedStud.getSubj().getName());
        // 原始对象和拷贝对象是否一样：
        System.out.println("Is Original Object the same with Cloned Object: " + (stud == clonedStud));
        // 原始对象和拷贝对象的name属性是否一样
        System.out.println("Is Original Object's field name the same with Cloned Object: " +
     (stud.getName() == clonedStud.getName()));
        // 原始对象和拷贝对象的subj属性是否一样
        System.out.println("Is Original Object's field subj the same with Cloned Object: " +
    (stud.getSubj() == clonedStud.getSubj()));
        stud.setName("Dan");
        stud.getSubj().setName("Physics");
        System.out.println("Original Object after it is updated: " + stud.getName() + " - " +
     stud.getSubj().getName());
        System.out.println("Cloned Object after updating original object: " + clonedStud.getName() +
     " - " + clonedStud.getSubj().getName());
    }
}
```



对原始对象stud的"name"属性所做的改变并没有影响到拷贝对象clonedStud，但是对引用对象subj的"name"属性所做的改变影响到了拷贝对象clonedStud。



深复制：

```java
public class Student implements Cloneable { 
   // 对象引用 
   private Subject subj; 

   private String name; 

   public Student(String s, String sub) { 
      name = s; 
      subj = new Subject(sub); 
   } 

   public Subject getSubj() { 
      return subj; 
   } 

   public String getName() { 
      return name; 
   } 

   public void setName(String s) { 
      name = s; 
   } 

   /** 
    * 重写clone()方法 
    * 
    * @return 
    */ 
   public Object clone() { 
      // 深拷贝，创建拷贝类的一个新对象，这样就和原始对象相互独立
      Student s = new Student(name, subj.getName()); 
      return s; 
   } 
}
```

因为它是深拷贝，所以你需要创建拷贝类的一个对象。因为在Student类中有对象引用，所以需要在Student类中实现Cloneable接口并且重写clone方法。



最后

数组与集合基本上使用浅复制，数组使用clone()或者`Arrays.copyOf`方法。集合使用构造函数或者`clone`方法。

##### 基本数据类型与引用数据类型

基本数据类型：`byte`、`short`、`int`、`long`、`float`、`double`、`char`、`boolean`

​                           对应内存所存储的值是基本类型值。

引用数据类型：除去基本数据类型的其它类型都是引用数据类型，例如类、接口、数组。

​                           对应内存所存储的值是一个引用，是对象的存储地址。

| 基本数据类型                           | 引用数据类型                                                 |
| :------------------------------------- | :----------------------------------------------------------- |
| 变量名指向具体的数值                   | 变量名指向存数据对象的内存地址，即变量名指向`hash`值         |
| 变量在声明之后就会立刻分配给他内存空间 | 它以特殊的方式指向对象实体，这类变量声明时不会分配内存，只是存储了一个内存地址 |
| 基本类型之间的赋值是创建新的拷贝       | 对象之间的赋值只是传递引用                                   |
| “==”和“!=”是在比较值                   | `“==”`和`“!=”`是在比较两个引用是否相同                       |
| 使用时需要赋具体值，判断时使用`==`号   | 使用时可以赋值`null`，判断时使用`equals`方法                 |

![img](file:///C:\Users\lenovo\Documents\Tencent Files\1229150204\Image\C2C\F22BAC6902E9CE98729CB0CA080DB276.jpg)



##### 类与对象

类是高级抽象之后的产物。类定义了对象，对象是从类创建的。

默认值：引用类型数据域的默认值是null，数据类型数据域的默认值是0，Boolean类型数据域的默认值是false，而char类型数据域的默认值是'\n0000'，方法中的局部变量没有被赋予默认值。

使用Java库中的类

Data类：

![1573438043177](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\1573438043177.png)

Random类：

![1573438069021](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\1573438069021.png)

Point2D类：

![1573438058709](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\1573438058709.png)
